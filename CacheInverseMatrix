#This is the pair of functions that cache the inverse of a matrix

#Creates a special "matrix" object that can cache its inverse
makeCacheMatrix<-function(m=matrix()){

#set the matrix
i<-NULL
set<-function(matrix){
m<<-matrix
i<<-NULL
}

#get the matrix
get<-function(){
m
}

#inverse the matrix
setInverse<-function(inverse){
i<<-inverse
}

#get the inverse of the matrix
getInverse<-function(){
i
}

#return a list of above methods and the first part ends
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}


#Computes the inverse of the special matrix returned by "makeCacheMatrix" above.
#If the inverse has been calculated, then the "cachesolve" should retrieve the inverse from the cache.
 
m<-x$getInverse()
#return the inverse if its already set
if(!is.null(m)){
print("obtaining cached data")
return(m)
}

#get the object from our object 
data<-x$get()
m<-solve(data)%*%data
#set the inverse to the object and second part ends
x$setInverse(m)

m
}


